vcl 4.0;
import directors;

{% for host in hosts %}
    {% for backend in host.backends %}
        backend {{ backend.name }}
        {
            .host = "{{ backend.hostname }}";
            .port = "{{ backend.port }}";
            .connect_timeout = {{ backend.connectTimeout }}s;
            .first_byte_timeout = {{ backend.firstByteTimeout }}s;
            .between_bytes_timeout = {{ backend.betweenBytesTimeout }}s;
        }

            {#.probe = {#}
                {#.url = $backend['url'].#}
                {#.request = ";#}
                    {#"GET ".$backend['url']." HTTP/1.1#}
                    {#"Host: ;#}
                    {#"Connection: close\";";#}
                {#.timeout = 15s;#}
                {#.interval = 3s;#}
                {#.window = 3;#}
                {#.threshold = 3;#}
                {#.initial = 3;#}
                {#.expected_response = 200;#}
            {#}#}
    {% endfor %}
{% endfor %}

sub vcl_init {
    {% for host in hosts %}
        new {{ host.directorName }} = directors.{{ host.backendStrategy }}();

        {% for backend in host.backends %}
            {{ host.directorName }}.add_backend({{ backend.name }});
        {% endfor %}
    {% endfor %}
}

backend acmetool {
   .host = "127.0.0.1";
   .port = "8080";
}

acl local {
  "localhost";
}

sub vcl_recv
{
    call pipe_uncorrect_request_header;
    call common_recv;

    {% for host in hosts %}
        if(req.http.host ~ "^{{ host.domain }}$")
        {
            {% if host.https == 2 %} {# https only #}
                if (client.ip !~ local) {
                    return (synth(302, "https://{{ host.domain }}" + req.url));
                }
            {% endif %}

            set req.backend_hint = {{ host.directorName }}.backend();

            return({{ host.transferType }});
        }
    {% endfor %}

#    set req.http.x-Redir-Url = "https://www.xq-web.de";
    return (synth(404, "Not Found"));
}

sub common_recv
{
    if (req.url ~ "^/.well-known/acme-challenge/") {
        set req.backend_hint = acmetool;
        return (pass);
    }

    /* Forward client ip */
    if (client.ip !~ local) {
    	set req.http.X-Forwarded-For = regsub(client.ip, ":.*", "");
    }

    /* We only deal with GET and HEAD by default */
#    if (req.request != "GET" && req.request != "HEAD")
#    {
#        return (pass);
#    }
}

sub pipe_uncorrect_request_header
{
#    if (req.request != "GET" &&
#    req.request != "HEAD" &&
#    req.request != "PUT" &&
#    req.request != "POST" &&
#    req.request != "TRACE" &&
#    req.request != "OPTIONS" &&
#    req.request != "DELETE") {
#
#    /* Non-RFC2616 or CONNECT which is weird. */
#      return (pipe);
#    }
}

/* fetch */

{#sub vcl_fetch#}
{#{#}

{#}#}

/* deliver */

sub vcl_deliver
{
    call edit_deliver_header;
}


sub edit_deliver_header
{
    unset   resp.http.Server;
    unset   resp.http.Age;
    unset   resp.http.X-Varnish;
    unset   resp.http.Via;
    unset   resp.http.X-Powered-By;
    set     resp.http.X-Served-By   = server.hostname;
}

#sub vcl_error {
#    set obj.http.Content-Type = "text/html; charset=utf-8";
#    synthetic {"
#    <?xml version="1.0" encoding="utf-8"?>
#    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
#    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
#    <html>
#    <head>
#      <title>404</title>
#      <style src="css/style.css"></style>
#    </head>
#    <body>
#    <h1>The server is being updated</h1>
#    <p>Please check back later. Meanwhile, here's a picture of a rabbit with a pancake on its head:</p>
#    <img src="img/wabbit.jpg" alt="awwwww!" />
#    </body>
#   </html>"};
#}

{#sub vcl_error {#}
    {#if (obj.status == 750) {#}
        {#set obj.http.Location = obj.response;#}
        {#set obj.status = 302;#}
        {#return (deliver);#}
    {#}#}
{#}#}

sub vcl_synth {
    if (resp.status == 301 || resp.status == 302) {
        set resp.http.location = resp.reason;
        set resp.reason = "Moved";
        return (deliver);
    }
}

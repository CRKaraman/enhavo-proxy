#!/usr/bin/php
<?php

$varnishDir = "/etc/varnish";
$varnishDomainListDir = $varnishDir.'/domain';
$varnishDomainVCL = $varnishDir.'/domain.vcl';
$varnishBackendVCL = $varnishDir.'/backend.vcl';
$varnishConfigVCL = $varnishDir.'/xq-cache.vcl';

echo "build domain and backend files...";
main();
echo "done!\n";


/*
function restartVarnish()
{
    echo "check errors from vcc compiler...";
    exec("varnishd -C -f ".$varnishConfigVCL." > test");

    #var_dump($compileOutput);
    exit();
    if(preg_match('/Running VCC-compiler failed/', $compileOutput))
    {
        echo "error occured\n";
        echo $compileOutput;
    } else {
        echo "no error, restart varnish now\n";
        //system("service varnish restart");
    }
}
*/

function main()
{
    $configArray = configToArray();
    var_dump($configArray);
    createDomainVCL($configArray);
    createBackendVCL($configArray);
}

function getFileArrayInDir()
{
    global $varnishDomainListDir;

    if ($handle = opendir($varnishDomainListDir))
    {
        while (false !== ($file = readdir($handle)))
        {
            if($file != "." && $file != "..") {
                $fileArray[] = $varnishDomainListDir.'/'.$file;
            }
        }
        closedir();
    }

    return $fileArray;
}


function configToArray()
{
    $fileArray = getFileArrayInDir();
    $linesArray = array();

    foreach($fileArray as $file)
    {
        $lines = file($file);

        for($i = 0; $i < count($lines); $i++)
        {
            $lines[$i] = trim($lines[$i]);

            if(preg_match('/^#/', $lines[$i]))
                continue;

            if("" == trim($lines[$i]))
                continue;

            $linesArray[] = $lines[$i];
        }
    }

    return parseConfig($linesArray);
}

function parseConfig($lines)
{
    $configArray = array();
    foreach($lines as $line)
    {
        $config = parseLine($line);
        $configArray[$config['domain']] = $config;
    }

    return $configArray;
}


function parseLine($line)
{
    $config = array();

    $values = split('=', $line);

    $domain = trim(array_shift($values));
    $backend = trim(implode('=',$values));

    if(preg_match('/(.+)\[(.+)\]/', $domain, $match))
    {
        $attributes = split(',', $match[2]);
        foreach($attributes as $attribute)
        {
            $config['attribute'][trim($attribute)] = true;
        }

        $config['domain'] = $match[1];
    } else {
        $config['domain'] = $domain;
    }

    $hosts = split(';', $backend);
    foreach($hosts as $host)
    {
        $match = array();
        if(preg_match('/(.+)\[(.+)\]/', $host, $match))
        {
            $additional = array();
            $additional['host'] = $match[1];
            $attributes = split(',', $match[2]);
            foreach($attributes as $attribute)
            {
                $values = split('=', $attribute);
                if(count($values) == 1)
                {
                    $additional[trim($values[0])] = true;
                } else {
                    $additional[trim($values[0])] = trim($values[1]);
                }
            }

            $config['backend'][] = $additional;
        } else {
            $config['backend'][] = array( 'host' => trim($host) );
        }
    }

    return $config;
}


function createDomainVCL($configArray)
{
    global $varnishDomainVCL;
    $lines = array();
    $lines[] = "#Do not edit this file! This file is generated!";
    foreach($configArray as $domain => $data)
    {
        $lines[] = "if(req.http.host ~ \"^".$domain."$\")";
        $lines[] = "{";

        if($data['attribute']['https'])
        {
            $lines[] = "    if (client.ip !~ local) {";
            $lines[] = "        set req.http.x-Redir-Url = \"https://".$domain."\" + req.url;";
            $lines[] = "        error 750 req.http.x-Redir-Url;";
            $lines[] = "    }";
            $lines[] = "";
        }

        $lines[] = "    set req.backend = backend_".vclSubRoutineEscape($domain).";";
        $lines[] = "    return (pass);";

        /*
        if($data['attribute']['failover'])
        {
            $i = 0;
            foreach($data['backend'] as $backend)
            {
                $lines[] = "    set req.backend = backend_".vclSubRoutineEscape($domain)."_".$i.";";
                $lines[] = "    if (req.backend.healthy) {";
                $lines[] = "        return (pass);";
                $lines[] = "    }";
                $i++;
            }

            $lines[] = "";
        } else {
        }
        */

        $lines[] = "}";
        $lines[] = "";

    }
    $data = implode("\n", $lines);
    file_put_contents($varnishDomainVCL, $data);
}

function createBackendVCL($configArray)
{
    global $varnishBackendVCL;
    $lines = array();
    $lines[] = "#Do not edit this file! This file is generated!";
    foreach($configArray as $domain => $data)
    {
        $i = 0;
        foreach($data['backend'] as $backend)
        {
            $lines[] = "backend backend_".vclSubRoutineEscape($domain)."_".$i;
            $lines[] = "{";
            $lines[] = "    .host = \"".$backend['host']."\";";
            if($backend['port'])
                $lines[] = "    .port = \"".$backend['port']."\";";
            else
                $lines[] = "    .port = \"80\";";
            $lines[] = "    .connect_timeout = 60s;";
            $lines[] = "    .first_byte_timeout = 60s;";
            $lines[] = "    .between_bytes_timeout = 60s;";
            $lines[] = "";

            if($backend['url'])
            {

                $lines[] = "    .probe = {";
                //$lines[] = "        .url = \"".$backend['url']."\";";
                $lines[] = "        .request = ";
                $lines[] = "            \"GET ".$backend['url']." HTTP/1.1\"";
                $lines[] = "            \"Host: ".$domain."\"";
                $lines[] = "            \"Connection: close\";";
                $lines[] = "        .timeout = 15s;";
                $lines[] = "        .interval = 3s;";
                $lines[] = "        .window = 3;";
                $lines[] = "        .threshold = 3;";
                $lines[] = "        .initial = 3;";
                $lines[] = "        .expected_response = 200;";
                $lines[] = "    }";
            }

            $lines[] = "}";

            $i++;
        }

        if($data['attribute']['failover']) {
            $director = "fallback";
        } else {
            $director = "round-robin";
        }

        $lines[] = "director backend_".vclSubRoutineEscape($domain)." ".$director;
        $lines[] = "{";
        for($i = 0; $i < count($data['backend']); $i++)
        {
            $lines[] = "  { .backend = backend_".vclSubRoutineEscape($domain)."_".$i."; }";
        }
        $lines[] = "}";
        $lines[] = "";
        $lines[] = "";
    }

    $data = implode("\n", $lines);
    file_put_contents($varnishBackendVCL, $data);
}

function vclSubRoutineEscape($text)
{
    $text = str_replace('.', '_', $text);
    $text = str_replace('-', '_', $text);
    return $text;
}